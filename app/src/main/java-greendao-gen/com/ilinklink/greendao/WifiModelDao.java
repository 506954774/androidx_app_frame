package com.ilinklink.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilinklink.greendao.WifiModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WIFI_MODEL.
*/
public class WifiModelDao extends AbstractDao<WifiModel, Long> {

    public static final String TABLENAME = "WIFI_MODEL";

    /**
     * Properties of entity WifiModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WifiName = new Property(1, String.class, "wifiName", false, "WIFI_NAME");
        public final static Property WifiPassword = new Property(2, String.class, "wifiPassword", false, "WIFI_PASSWORD");
        public final static Property Capabilities = new Property(3, String.class, "capabilities", false, "CAPABILITIES");
    };


    public WifiModelDao(DaoConfig config) {
        super(config);
    }
    
    public WifiModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WIFI_MODEL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'WIFI_NAME' TEXT," + // 1: wifiName
                "'WIFI_PASSWORD' TEXT," + // 2: wifiPassword
                "'CAPABILITIES' TEXT);"); // 3: capabilities
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WIFI_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WifiModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wifiName = entity.getWifiName();
        if (wifiName != null) {
            stmt.bindString(2, wifiName);
        }
 
        String wifiPassword = entity.getWifiPassword();
        if (wifiPassword != null) {
            stmt.bindString(3, wifiPassword);
        }
 
        String capabilities = entity.getCapabilities();
        if (capabilities != null) {
            stmt.bindString(4, capabilities);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WifiModel readEntity(Cursor cursor, int offset) {
        WifiModel entity = new WifiModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wifiName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wifiPassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // capabilities
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WifiModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWifiName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWifiPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCapabilities(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WifiModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WifiModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
