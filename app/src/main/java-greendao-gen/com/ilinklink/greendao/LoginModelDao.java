package com.ilinklink.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilinklink.greendao.LoginModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOGIN_MODEL.
*/
public class LoginModelDao extends AbstractDao<LoginModel, Long> {

    public static final String TABLENAME = "LOGIN_MODEL";

    /**
     * Properties of entity LoginModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UsrId = new Property(1, Integer.class, "usrId", false, "USR_ID");
        public final static Property AccId = new Property(2, Integer.class, "accId", false, "ACC_ID");
        public final static Property AccType = new Property(3, Integer.class, "accType", false, "ACC_TYPE");
        public final static Property Certificate = new Property(4, Integer.class, "certificate", false, "CERTIFICATE");
        public final static Property AccAcount = new Property(5, String.class, "accAcount", false, "ACC_ACOUNT");
        public final static Property Tocken = new Property(6, String.class, "tocken", false, "TOCKEN");
        public final static Property UsrName = new Property(7, String.class, "usrName", false, "USR_NAME");
        public final static Property UsrImMobile = new Property(8, String.class, "usrImMobile", false, "USR_IM_MOBILE");
        public final static Property UsrPictureUri = new Property(9, String.class, "usrPictureUri", false, "USR_PICTURE_URI");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property Wx_open_id = new Property(11, String.class, "wx_open_id", false, "WX_OPEN_ID");
        public final static Property Weibo_open_id = new Property(12, String.class, "weibo_open_id", false, "WEIBO_OPEN_ID");
        public final static Property Login_time = new Property(13, Long.class, "login_time", false, "LOGIN_TIME");
        public final static Property Is_logged = new Property(14, Boolean.class, "is_logged", false, "IS_LOGGED");
        public final static Property Md5 = new Property(15, String.class, "md5", false, "MD5");
        public final static Property Uid = new Property(16, String.class, "uid", false, "UID");
    };


    public LoginModelDao(DaoConfig config) {
        super(config);
    }
    
    public LoginModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOGIN_MODEL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USR_ID' INTEGER," + // 1: usrId
                "'ACC_ID' INTEGER UNIQUE ," + // 2: accId
                "'ACC_TYPE' INTEGER," + // 3: accType
                "'CERTIFICATE' INTEGER," + // 4: certificate
                "'ACC_ACOUNT' TEXT," + // 5: accAcount
                "'TOCKEN' TEXT," + // 6: tocken
                "'USR_NAME' TEXT," + // 7: usrName
                "'USR_IM_MOBILE' TEXT," + // 8: usrImMobile
                "'USR_PICTURE_URI' TEXT," + // 9: usrPictureUri
                "'PASSWORD' TEXT," + // 10: password
                "'WX_OPEN_ID' TEXT," + // 11: wx_open_id
                "'WEIBO_OPEN_ID' TEXT," + // 12: weibo_open_id
                "'LOGIN_TIME' INTEGER," + // 13: login_time
                "'IS_LOGGED' INTEGER," + // 14: is_logged
                "'MD5' TEXT," + // 15: md5
                "'UID' TEXT);"); // 16: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOGIN_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoginModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer usrId = entity.getUsrId();
        if (usrId != null) {
            stmt.bindLong(2, usrId);
        }
 
        Integer accId = entity.getAccId();
        if (accId != null) {
            stmt.bindLong(3, accId);
        }
 
        Integer accType = entity.getAccType();
        if (accType != null) {
            stmt.bindLong(4, accType);
        }
 
        Integer certificate = entity.getCertificate();
        if (certificate != null) {
            stmt.bindLong(5, certificate);
        }
 
        String accAcount = entity.getAccAcount();
        if (accAcount != null) {
            stmt.bindString(6, accAcount);
        }
 
        String tocken = entity.getTocken();
        if (tocken != null) {
            stmt.bindString(7, tocken);
        }
 
        String usrName = entity.getUsrName();
        if (usrName != null) {
            stmt.bindString(8, usrName);
        }
 
        String usrImMobile = entity.getUsrImMobile();
        if (usrImMobile != null) {
            stmt.bindString(9, usrImMobile);
        }
 
        String usrPictureUri = entity.getUsrPictureUri();
        if (usrPictureUri != null) {
            stmt.bindString(10, usrPictureUri);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String wx_open_id = entity.getWx_open_id();
        if (wx_open_id != null) {
            stmt.bindString(12, wx_open_id);
        }
 
        String weibo_open_id = entity.getWeibo_open_id();
        if (weibo_open_id != null) {
            stmt.bindString(13, weibo_open_id);
        }
 
        Long login_time = entity.getLogin_time();
        if (login_time != null) {
            stmt.bindLong(14, login_time);
        }
 
        Boolean is_logged = entity.getIs_logged();
        if (is_logged != null) {
            stmt.bindLong(15, is_logged ? 1l: 0l);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(16, md5);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(17, uid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoginModel readEntity(Cursor cursor, int offset) {
        LoginModel entity = new LoginModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // usrId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // accId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // accType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // certificate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accAcount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tocken
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // usrName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // usrImMobile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // usrPictureUri
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // password
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // wx_open_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // weibo_open_id
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // login_time
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // is_logged
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // md5
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // uid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoginModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsrId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAccId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAccType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCertificate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAccAcount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTocken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsrName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUsrImMobile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUsrPictureUri(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWx_open_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWeibo_open_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLogin_time(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setIs_logged(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setMd5(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LoginModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LoginModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
