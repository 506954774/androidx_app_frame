package com.ilinklink.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilinklink.greendao.TrainingModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRAINING_MODEL.
*/
public class TrainingModelDao extends AbstractDao<TrainingModel, Long> {

    public static final String TABLENAME = "TRAINING_MODEL";

    /**
     * Properties of entity TrainingModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrainingId = new Property(1, String.class, "trainingId", false, "TRAINING_ID");
        public final static Property CourseId = new Property(2, String.class, "courseId", false, "COURSE_ID");
        public final static Property GroupId = new Property(3, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupIndex = new Property(4, Integer.class, "groupIndex", false, "GROUP_INDEX");
        public final static Property FrameId = new Property(5, String.class, "frameId", false, "FRAME_ID");
        public final static Property FrameIndex = new Property(6, Long.class, "frameIndex", false, "FRAME_INDEX");
        public final static Property FrameTime = new Property(7, Long.class, "frameTime", false, "FRAME_TIME");
        public final static Property FrameContent = new Property(8, byte[].class, "frameContent", false, "FRAME_CONTENT");
        public final static Property FrameMatchDegreet = new Property(9, Float.class, "frameMatchDegreet", false, "FRAME_MATCH_DEGREET");
        public final static Property UserAcount = new Property(10, String.class, "userAcount", false, "USER_ACOUNT");
        public final static Property UserId = new Property(11, String.class, "userId", false, "USER_ID");
        public final static Property ActionId = new Property(12, String.class, "actionId", false, "ACTION_ID");
        public final static Property Sign = new Property(13, String.class, "sign", false, "SIGN");
        public final static Property Time = new Property(14, Long.class, "time", false, "TIME");
    };


    public TrainingModelDao(DaoConfig config) {
        super(config);
    }
    
    public TrainingModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAINING_MODEL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TRAINING_ID' TEXT," + // 1: trainingId
                "'COURSE_ID' TEXT," + // 2: courseId
                "'GROUP_ID' TEXT," + // 3: groupId
                "'GROUP_INDEX' INTEGER," + // 4: groupIndex
                "'FRAME_ID' TEXT UNIQUE ," + // 5: frameId
                "'FRAME_INDEX' INTEGER," + // 6: frameIndex
                "'FRAME_TIME' INTEGER," + // 7: frameTime
                "'FRAME_CONTENT' BLOB," + // 8: frameContent
                "'FRAME_MATCH_DEGREET' REAL," + // 9: frameMatchDegreet
                "'USER_ACOUNT' TEXT," + // 10: userAcount
                "'USER_ID' TEXT," + // 11: userId
                "'ACTION_ID' TEXT," + // 12: actionId
                "'SIGN' TEXT," + // 13: sign
                "'TIME' INTEGER);"); // 14: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAINING_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrainingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(2, trainingId);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(3, courseId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(4, groupId);
        }
 
        Integer groupIndex = entity.getGroupIndex();
        if (groupIndex != null) {
            stmt.bindLong(5, groupIndex);
        }
 
        String frameId = entity.getFrameId();
        if (frameId != null) {
            stmt.bindString(6, frameId);
        }
 
        Long frameIndex = entity.getFrameIndex();
        if (frameIndex != null) {
            stmt.bindLong(7, frameIndex);
        }
 
        Long frameTime = entity.getFrameTime();
        if (frameTime != null) {
            stmt.bindLong(8, frameTime);
        }
 
        byte[] frameContent = entity.getFrameContent();
        if (frameContent != null) {
            stmt.bindBlob(9, frameContent);
        }
 
        Float frameMatchDegreet = entity.getFrameMatchDegreet();
        if (frameMatchDegreet != null) {
            stmt.bindDouble(10, frameMatchDegreet);
        }
 
        String userAcount = entity.getUserAcount();
        if (userAcount != null) {
            stmt.bindString(11, userAcount);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(12, userId);
        }
 
        String actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindString(13, actionId);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(14, sign);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(15, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrainingModel readEntity(Cursor cursor, int offset) {
        TrainingModel entity = new TrainingModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trainingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // courseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // groupIndex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // frameId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // frameIndex
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // frameTime
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // frameContent
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // frameMatchDegreet
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userAcount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // actionId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sign
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrainingModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCourseId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFrameId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrameIndex(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setFrameTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setFrameContent(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setFrameMatchDegreet(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setUserAcount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setActionId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSign(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrainingModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrainingModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
