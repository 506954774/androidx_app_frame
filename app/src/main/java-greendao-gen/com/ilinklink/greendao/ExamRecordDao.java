package com.ilinklink.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ilinklink.greendao.ExamRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXAM_RECORD.
*/
public class ExamRecordDao extends AbstractDao<ExamRecord, Long> {

    public static final String TABLENAME = "EXAM_RECORD";

    /**
     * Properties of entity ExamRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExamRecordId = new Property(1, String.class, "examRecordId", false, "EXAM_RECORD_ID");
        public final static Property ExamUUID = new Property(2, String.class, "examUUID", false, "EXAM_UUID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property ReservedColumn = new Property(5, String.class, "reservedColumn", false, "RESERVED_COLUMN");
        public final static Property ReservedColumn2 = new Property(6, String.class, "reservedColumn2", false, "RESERVED_COLUMN2");
        public final static Property ExamTime = new Property(7, String.class, "examTime", false, "EXAM_TIME");
    };


    public ExamRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ExamRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXAM_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EXAM_RECORD_ID' TEXT UNIQUE ," + // 1: examRecordId
                "'EXAM_UUID' TEXT," + // 2: examUUID
                "'NAME' TEXT," + // 3: name
                "'DESC' TEXT," + // 4: desc
                "'RESERVED_COLUMN' TEXT," + // 5: reservedColumn
                "'RESERVED_COLUMN2' TEXT," + // 6: reservedColumn2
                "'EXAM_TIME' TEXT);"); // 7: examTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXAM_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExamRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String examRecordId = entity.getExamRecordId();
        if (examRecordId != null) {
            stmt.bindString(2, examRecordId);
        }
 
        String examUUID = entity.getExamUUID();
        if (examUUID != null) {
            stmt.bindString(3, examUUID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String reservedColumn = entity.getReservedColumn();
        if (reservedColumn != null) {
            stmt.bindString(6, reservedColumn);
        }
 
        String reservedColumn2 = entity.getReservedColumn2();
        if (reservedColumn2 != null) {
            stmt.bindString(7, reservedColumn2);
        }
 
        String examTime = entity.getExamTime();
        if (examTime != null) {
            stmt.bindString(8, examTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExamRecord readEntity(Cursor cursor, int offset) {
        ExamRecord entity = new ExamRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // examRecordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // examUUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reservedColumn
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reservedColumn2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // examTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExamRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExamRecordId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExamUUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReservedColumn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReservedColumn2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExamTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExamRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExamRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
